{"version":3,"sources":["services/transaction.js","components/ListTransactions.js","hooks/useTransactions.js","Transactions.js"],"names":["transactionService","getAll","a","api","get","res","data","console","log","ListTransactions","useState","transactions","setTransactions","isLoading","setIsLoading","useEffect","useTransactions","className","width","colSpan","align","map","transaction","format","Date","createdAt","carts","cart","product","name","id","formatNumber","reduce","acc","quantity","price","status","length","Transaction"],"mappings":"6NAiBeA,EAJY,CACzBC,OAZU,uCAAG,4BAAAC,EAAA,+EAEOC,IAAIC,IAAJ,UAFP,cAELC,EAFK,yBAGJA,EAAIC,KAAKA,MAHL,gCAKXC,QAAQC,IAAR,MALW,iCAQN,IARM,yDAAH,sD,mBCEG,SAASC,IACtB,MCFa,WACb,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMb,EAAM,uCAAG,4BAAAC,EAAA,6DACbY,GAAa,GADA,SAEMd,EAAmBC,SAFzB,OAEPK,EAFO,OAGbM,EAAgBN,GAChBQ,GAAa,GAJA,2CAAH,qDAWZ,OAJAC,qBAAU,WACRd,MACC,IAEI,CAACU,EAAcE,GDbYG,GAAlC,mBAAOL,EAAP,KAAqBE,EAArB,KAEA,OACE,qBAAKI,UAAU,mBAAf,SACE,wBAAOA,UAAU,+CAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,QAAV,8BACA,uCACA,6CACA,8CACA,oBAAIA,MAAM,OAAV,yBAGJ,kCACGL,GACC,6BACE,qBAAIM,QAAS,EAAGC,MAAM,SAAtB,oCAC0B,UAI5BP,GACAF,EAAaU,KAAI,SAACC,GAAD,OACf,+BACE,6BACGC,YACC,IAAIC,KAAKF,EAAYG,WACrB,wBAGJ,6BACE,6BACGH,EAAYI,MAAML,KAAI,SAACM,GAAD,OACrB,6BAAmBA,EAAKC,QAAQC,MAAvBF,EAAKG,WAIpB,6BACGC,YACCT,EAAYI,MAAMM,QAChB,SAACC,EAAKN,GAAN,OAAeM,EAAMN,EAAKO,WAC1B,MAIN,6BACGH,YACCT,EAAYI,MAAMM,QAChB,SAACC,EAAKN,GAAN,OAAeM,EAAMN,EAAKO,SAAWP,EAAKC,QAAQO,QAClD,MAIN,6BAAKb,EAAYc,WA9BVd,EAAYQ,OAkCA,IAAxBnB,EAAa0B,QACZ,6BACE,oBAAIlB,QAAS,EAAGC,MAAM,SAAtB,2CE/DC,SAASkB,IACtB,OACE,qCACE,qBAAKrB,UAAU,eAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,aAAd,kCAKR,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,OAAf,SACE,cAACR,EAAD","file":"static/js/11.5c4a751a.chunk.js","sourcesContent":["import api from 'utils/api'\r\n\r\nconst getAll = async () => {\r\n  try {\r\n    const res = await api.get(`orders`)\r\n    return res.data.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n\r\n  return []\r\n}\r\n\r\nconst transactionService = {\r\n  getAll,\r\n}\r\n\r\nexport default transactionService\r\n","import { format } from 'date-fns'\r\nimport useTransactions from 'hooks/useTransactions'\r\nimport { formatNumber } from 'utils/number'\r\n\r\nexport default function ListTransactions() {\r\n  const [transactions, isLoading] = useTransactions()\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table table-vcenter card-table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th width=\"300px\">Date Transaction</th>\r\n            <th>Items</th>\r\n            <th>Total Items</th>\r\n            <th>Total Prices</th>\r\n            <th width=\"90px\">Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {isLoading && (\r\n            <tr>\r\n              <td colSpan={3} align=\"center\">\r\n                Loading Transaction ...{' '}\r\n              </td>\r\n            </tr>\r\n          )}\r\n          {!isLoading &&\r\n            transactions.map((transaction) => (\r\n              <tr key={transaction.id}>\r\n                <td>\r\n                  {format(\r\n                    new Date(transaction.createdAt),\r\n                    'dd MMMM yyyy HH:ii',\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  <ul>\r\n                    {transaction.carts.map((cart) => (\r\n                      <li key={cart.id}>{cart.product.name}</li>\r\n                    ))}\r\n                  </ul>\r\n                </td>\r\n                <td>\r\n                  {formatNumber(\r\n                    transaction.carts.reduce(\r\n                      (acc, cart) => acc + cart.quantity,\r\n                      0,\r\n                    ),\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {formatNumber(\r\n                    transaction.carts.reduce(\r\n                      (acc, cart) => acc + cart.quantity * cart.product.price,\r\n                      0,\r\n                    ),\r\n                  )}\r\n                </td>\r\n                <td>{transaction.status}</td>\r\n              </tr>\r\n            ))}\r\n\r\n          {transactions.length === 0 && (\r\n            <tr>\r\n              <td colSpan={5} align=\"center\">\r\n                Data tidak tersedia\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport transactionService from 'services/transaction'\r\n\r\nexport default function useTransactions() {\r\n  const [transactions, setTransactions] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const getAll = async () => {\r\n    setIsLoading(true)\r\n    const data = await transactionService.getAll()\r\n    setTransactions(data)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAll()\r\n  }, [])\r\n\r\n  return [transactions, isLoading]\r\n}\r\n","import ListTransactions from './components/ListTransactions'\r\n\r\nexport default function Transaction() {\r\n  return (\r\n    <>\r\n      <div className=\"container-xl\">\r\n        <div className=\"page-header d-print-none\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col\">\r\n              <h2 className=\"page-title\">Transactions</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"page-body\">\r\n        <div className=\"container-xl\">\r\n          <div className=\"row row-cards\">\r\n            <div className=\"col-12\">\r\n              <div className=\"card\">\r\n                <ListTransactions />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}